#ifndef AES_H
#define AES_H

#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <fstream>

using std::cout;
using std::endl;
using std::vector;
using std::string;

// 密码函数f
uint64_t f(uint64_t R, uint64_t K);
// 对56位密钥进行循环左移
void leftShift(uint64_t &k, int shift);
// 生成16个48位的子密钥
void generateKeys();
// 将char字符数组转为二进制
uint64_t stringToUint64(std::string s);
// 将uint64_t转为字符串
string uint64ToString(const uint64_t b);
// 将16进制字符串转为2进制uint_64
uint64_t Hex2Bin(string s);
// 将2进制uint_64转为16进制字符串
string Bin2Hex(uint64_t s);
// split a string
template<typename Out>
void split(const string &s, char delim, Out result);
vector<string> split(const string &s, char delim);
// 加解密公共核心
uint64_t crypt(uint64_t &text1, bool ed);
// 加密
uint64_t encrypt(uint64_t &plain);
// 解密
uint64_t decrypt(uint64_t &cipher);
// 加密文件
string encryptFile(string inPath, string outPath);
// 解密文件
string decryptFile(string inPath, string outPath);
// 计算文件大小
std::streampos fileSize(string filename);

//// 补充字节
//const string C[] = {"1", "22", "333", "4444", "55555",
//                    "666666", "7777777", "88888888"};

// 初始置换表 IP(initial permutation) - 1
const int IP[] = { 57, 49, 41, 33, 25, 17,  9, 1,
                   59, 51, 43, 35, 27, 19, 11, 3,
                   61, 53, 45, 37, 29, 21, 13, 5,
                   63, 55, 47, 39, 31, 23, 15, 7,
                   56, 48, 40, 32, 24, 16,  8, 0,
                   58, 50, 42, 34, 26, 18, 10, 2,
                   60, 52, 44, 36, 28, 20, 12, 4,
                   62, 54, 46, 38, 30, 22, 14, 6};

// 尾置换表 the inverse of IP - 1
const int FP[] = {39, 7, 47, 15, 55, 23, 63, 31,
                  38, 6, 46, 14, 54, 22, 62, 30,
                  37, 5, 45, 13, 53, 21, 61, 29,
                  36, 4, 44, 12, 52, 20, 60, 28,
                  35, 3, 43, 11, 51, 19, 59, 27,
                  34, 2, 42, 10, 50, 18, 58, 26,
                  33, 1, 41,  9, 49, 17, 57, 25,
                  32, 0, 40,  8, 48, 16, 56, 24};

// 密钥置换表，64位->56位 - 1
const int PC_1[] = {56, 48, 40, 32, 24, 16,  8,
                     0, 57, 49, 41, 33, 25, 17,
                     9,  1, 58, 50, 42, 34, 26,
                    18, 10,  2, 59, 51, 43, 35,
                    62, 54, 46, 38, 30, 22, 14,
                     6, 61, 53, 45, 37, 29, 21,
                    13,  5, 60, 52, 44, 36, 28,
                    20, 12,  4, 27, 19, 11,  3};

// 压缩置换，56位->48位 - 1
const int PC_2[] = {13, 16, 10, 23,  0,  4,
                     2, 27, 14,  5, 20,  9,
                    22, 18, 11,  3, 25,  7,
                    15,  6, 26, 19, 12,  1,
                    40, 51, 30, 36, 46, 54,
                    29, 39, 50, 44, 32, 47,
                    43, 48, 38, 55, 33, 52,
                    45, 41, 49, 35, 28, 31};

// 每轮左移的位数
const int shiftBits[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// 扩展置换表，32位->48位 - 1
const int E[] = {31,  0,  1,  2,  3,  4,
                  3,  4,  5,  6,  7,  8,
                  7,  8,  9, 10, 11, 12,
                 11, 12, 13, 14, 15, 16,
                 15, 16, 17, 18, 19, 20,
                 19, 20, 21, 22, 23, 24,
                 23, 24, 25, 26, 27, 28,
                 27, 28, 29, 30, 31,  0};

// S盒，每个S盒是4x16的置换表，6位->4位
const int S_BOX[8][4][16] = {
    {
        {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
        {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
        {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
        {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
    },
    {
        {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
        {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
        {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
        {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
    },
    {
        {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
        {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
        {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
        {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
    },
    {
        {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
        {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
        {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
        {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
    },
    {
        {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
        {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
        {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
        {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
    },
    {
        {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
        {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
        {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
        {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
    },
    {
        {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
        {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
        {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
        {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
    },
    {
        {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
        {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
        {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
        {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
    }
};

// 优化查询的S盒
const int S_BOX2[8][64] = {
        {
            14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,
            3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,
            4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,
            15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13
        },
        {
            15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,
            9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,
            0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,
            5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9
        },
        {
            10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,
            1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,
            13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,
            11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12
        },
        {
            7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,
            1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,
            10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,
            15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14
        },
        {
            2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,
            8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,
            4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,
            15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3
        },
        {
            12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,
            0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,
            9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,
            7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13
        },
        {
            4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,
            3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,
            1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,
            10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12
        },
        {
            13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,
            10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,
            7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,
            0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11
        }
};

// P置换，32位->32位 - 1
const int P[] = {15,  6, 19, 20,
                 28, 11, 27, 16,
                  0, 14, 22, 25,
                  4, 17, 30,  9,
                  1,  7, 23, 13,
                 31, 26,  2,  8,
                 18, 12, 29,  5,
                 21, 10,  3, 24};

#endif // AES_H
